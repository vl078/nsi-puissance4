import numpy as np

# Constantes du jeu avec emojis üéÆ
LIGNES = 6
COLONNES = 7
VIDE = "‚ö™"  # Case vide
JOUEUR_1 = "üî¥"  # Pion rouge
JOUEUR_2 = "üîµ"  # Pion jaune

# Cr√©ation de la grille
def creer_grille():
    return np.full((LIGNES, COLONNES), VIDE)  # Remplir avec les cases vides

# Affichage de la grille
def afficher_grille(grille):
    print("\n")
    for ligne in reversed(grille):  # Affichage du bas vers le haut
        print(" | ".join(ligne))
        print("-" * 36)

# V√©rifier si un emplacement est valide
def est_valide(grille, col):
    return grille[LIGNES-1][col] == VIDE

# Obtenir la ligne disponible dans une colonne
def obtenir_ligne(grille, col):
    for r in range(LIGNES):
        if grille[r][col] == VIDE:
            return r
    return -1

# V√©rifier si un joueur a gagn√©
def verifie_gagnant(grille, joueur):
    # V√©rification horizontale
    for r in range(LIGNES):
        for c in range(COLONNES-3):
            if all(grille[r][c+i] == joueur for i in range(4)):
                return True

    # V√©rification verticale
    for c in range(COLONNES):
        for r in range(LIGNES-3):
            if all(grille[r+i][c] == joueur for i in range(4)):
                return True

    # V√©rification diagonale (descendante)
    for r in range(LIGNES-3):
        for c in range(COLONNES-3):
            if all(grille[r+i][c+i] == joueur for i in range(4)):
                return True

    # V√©rification diagonale (montante)
    for r in range(3, LIGNES):
        for c in range(COLONNES-3):
            if all(grille[r-i][c+i] == joueur for i in range(4)):
                return True

    return False

# Fonction principale du jeu
def puissance4():
    grille = creer_grille()
    joueur = JOUEUR_1  # Joueur 1 commence
    
    while True:
        afficher_grille(grille)
        
        col = input(f"üïπ Joueur {joueur}, choisissez une colonne (0 √† {COLONNES-1}) : ")

        # V√©rifications avec assert
        assert col.isdigit(), "‚ùå Erreur : Veuillez entrer un num√©ro valide."
        col = int(col)
        assert 0 <= col < COLONNES, "‚ùå Erreur : Colonne hors limites."
        assert est_valide(grille, col), "‚ùå Erreur : Colonne pleine, choisissez une autre."

        # Placer le pion
        ligne = obtenir_ligne(grille, col)
        grille[ligne][col] = joueur

        # V√©rification du gagnant
        if verifie_gagnant(grille, joueur):
            afficher_grille(grille)
            print(f"üéâ Le joueur {joueur} a gagn√© !")
            break

        # V√©rification match nul (grille pleine)
        if np.all(grille != VIDE):
            afficher_grille(grille)
            print("‚öñ Match nul !")
            break

        # Changer de joueur
        joueur = JOUEUR_2 if joueur == JOUEUR_1 else JOUEUR_1

# Lancer le jeu
if __name__ == "__main__":
    puissance4()
